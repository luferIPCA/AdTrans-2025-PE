# -*- coding: utf-8 -*-
"""2_Documenting Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nz5IWgxyXTWPZqSlbdaquPh--1FrgMfA

# Python Essential
### AdTrans project, 2023-1-PL01-KA220-HED-000158917

(June 2025 - IPCA)

Notebook (2_Documenting Python.ipynb)

by [*lufer*](mailto:lufer@ipca.pt)

(ver 1.0)

---

# Documenting Python Code

Is is importante to distinguish code docummenting versus commenting code

*  Docummenting code is critical for others, taht will use my code, mainly!
*  Commenting code is relevant for others that "will continue" my job, mainly!


**Contents**:

1. **Commenting python**
2. **Documenting python**

## 1 - Commenting Python

used with symbol "#"


```
x=12  # variable x is initialized with 12
```
"""

# Sum function implementation
def Sum(x,y):
  return x+y

a = Sum(2,3)  #Sum function utilization
a

def Div(x,y):
  #ATTENTION: y must be checked to be not zero
  return x / y

b = Div(2,1)
b

def safe_divide(a, b):
      if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
        raise TypeError("Both arguments must be numbers (int or float).")

      if b == 0:
        raise ZeroDivisionError("Division by zero is not allowed.")

      return a / b

b = safe_divide(2,0)

"""## 2 - Documenting Python code

1. Using Docstrings
"""

#check this command
help(str)

#single line documentation (DocString)
def say_hello(name):
    """A simple function that says hello... Richie style"""
    print(f"Hello {name}, is it me you're looking for?")

help(say_hello)

#multiline DocString
def safe_divide(a, b):
    """
    Divides a by b with error protection.

    Args:
        a (float or int): Numerator
        b (float or int): Denominator

    Returns:
        float: The result of the division

    Raises:
        TypeError: If inputs are not int or float
        ZeroDivisionError: If b is zero
    """
    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
        raise TypeError("Both arguments must be numbers (int or float).")

    if b == 0:
        raise ZeroDivisionError("Division by zero is not allowed.")

    return a / b

help(safe_divide)

"""2. Generate external documentation"""

#documentation for DoxyGen
def unsafe_divide(a, b):
    """!Divides a by b with error protection.

    @param a   First value.
    @param b   Second value.

    @return    the division.

    """

    return a / b

c = unsafe_divide(2,3)
c

help(unsafe_divide)

"""Using DoxyGen

```
# generate the doxygen docfile
dozygen -g

# or run the Doxywizard
dozywizard
```
"""

def divide(a, b):
    """!Divides a by b with error protection.

    @param a   First value (numerator).
    @param b   Second value (denominator).
    @return    The result of division, or a string describing the error.
    """
    try:
        return a / b
    except ZeroDivisionError:
        return "Error: Division by zero."
    except TypeError:
        return "Error: Inputs must be numbers."

d = divide(2,0)
d

# help(divide)

"""## References

*   Free Python Courses by Cisco -
https://www.netacad.com/learning-collections/python

End!
"""