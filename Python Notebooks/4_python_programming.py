# -*- coding: utf-8 -*-
"""4_Python_Programming.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xP--5pCNKpBxuyX6vFQQ0XAxEkZx63Dy

# Python Essential
### AdTrans project, 2023-1-PL01-KA220-HED-000158917

(June 2025 - IPCA)

Notebook (4_Python_Programming.ipynb)

by [*lufer*](mailto:lufer@ipca.pt)

(ver 1.0)

---

Mounting Google drive
"""

# or
#see https://towardsdatascience.com/different-ways-to-connect-google-drive-to-a-google-colab-notebook-pt-1-de03433d2f7a
#see https://adriandolinay.medium.com/an-introduction-to-google-colab-2023-6c26792827b3

from google.colab import drive

# it will ask for your google drive credentiaals
drive.mount('/content/AdTrans/', force_remount=True)

"""### Unmounting Google Drive"""

#if necessary!

from google.colab import drive
drive.flush_and_unmount()

"""[How to unmount](https://www.geeksforgeeks.org/unmount-drive-in-google-colab-and-remount-to-another-drive/)

# Python Programming



1.   Basic operations
2.   Data types
3.   Execution control statements
4.   List comprehensions, iterators, etc.
5.   Functions

### Basic Operations
"""

a=2+3
a

"""### Data Types"""

a = 5>3 and 5<10
a

"""### Lists"""

simpsons = ['homer', 'marge', 'bart']

len(simpsons)

simpsons.insert(0,"ok")
#simpsons.remove("ok")
simpsons

simpsons.remove("ok")
simpsons

"""### Tupples"""

digits = tuple([0, 1, 'two'])
digits

digits = digits + (3, 4)
digits

zero = (0,)
zero

"""## Strings"""

#removing spaces
s5 = '  ham and cheese  '
s5.strip()          # returns 'ham and cheese'
s5.rstrip()         # returns '  ham and cheese'
s5.lstrip()         # returns 'ham and cheese  '
s5.replace(' ', '_')

#Formating strings
case_nr=10
dim_nr=7
temp=12.34
s='{0}\t{1}\t{2:.4f}'.format(case_nr, dim_nr, temp) #Increase number of digits after decimal point to 4
print(s)

#f-string:
print(f'{case_nr}\t{dim_nr}\t{temp:.4f}')

"""**Note**: *string.method()* generates a new string

## Dictionaries
"""

simpsons_roles_dict = {'Homer': 'father', 'Marge': 'mother',
                       'Bart': 'son', 'Lisa': 'daughter', 'Maggie': 'daughter'}

# examine a dictionary
simpsons_roles_dict['Homer']   # 'father'
len(simpsons_roles_dict)       # 5
simpsons_roles_dict.keys()     # list: ['Homer', 'Marge', ...]
simpsons_roles_dict.values()   # list:['father', 'mother', ...]
simpsons_roles_dict.items()    # list of tuples: [('Homer', 'father') ...]
'Homer' in simpsons_roles_dict  # returns True
'John' in simpsons_roles_dict  # returns False (only checks keys)

# accessing values more safely with 'get'
simpsons_roles_dict['Homer']                       # returns 'father'
simpsons_roles_dict.get('Homer')                   # same thing

#Add a new entry
simpsons_roles_dict['Snowball'] = 'dog'

simpsons_roles_dict['Snoop'] = 'dog'                 # edit an existing entry
#del simpsons_roles_dict['Snowball']                  # delete an entry...it must exist!
simpsons_roles_dict

#INtersecting
simpsons_ages_dict = {'Homer': 45, 'Marge': 43,
                      'Bart': 11, 'Lisa': 10, 'Maggie': 1}

print(simpsons_roles_dict.keys() & simpsons_ages_dict.keys())

inter = simpsons_roles_dict.keys() & simpsons_ages_dict.keys() #the keys that are presented in both dictionaries

l = list()

for n in inter:
    l.append([n, simpsons_ages_dict[n], simpsons_roles_dict[n]])

[[n, simpsons_ages_dict[n], simpsons_roles_dict[n]] for n in inter]
#l
#inter

"""## Sets"""

# create an empty set
empty_set = set()

# create a set
languages = {'python', 'r', 'java'}         # create a set directly
snakes = set(['cobra', 'viper', 'python'])  # create a set from a list

#Check each line of code
languages & snakes          # intersection: {'python'}
languages | snakes          # union: {'cobra', 'r', 'java', 'viper', 'python'}
languages - snakes          # set difference: {'r', 'java'}
snakes - languages          # set difference: {'cobra', 'viper'}

# modify a set (does not return the set)
languages.add('sql')        # add a new element
# try to add an existing element (ignored, no error)
languages.add('r')
languages.remove('java')    # remove an element

try:
    languages.remove('c')   # remove a non-existing element: throws an error
except KeyError as e:
    print("Error", e)

# removes an element if present, but ignored otherwise
languages.discard('c')
languages.pop()             # removes and returns an arbitrary element
languages.clear()           # removes all elements
languages.update('go', 'spark')  # add multiple elements (list or set)

# get a sorted list of unique elements from a list
sorted(set([9, 0, 2, 1, 0]))    # returns [0, 1, 2, 9]

"""## Execution Control

### if | if..else
"""

x = 3
if x > 0:
    print('positive')

sign = 'positive' if x > 0 else 'zero or negative'
print(sign)

"""### Loops"""

for v in [0,1,2]:
    print(v)

for i in range(0,5):
    print(i)

fruits = ['Apple', 'Banana', 'cherry']
for fruit in fruits:
    print(fruit.upper())

cubes_of_even = [num**3 for num in nums if num % 2 == 0]    # [8, 64]

i=3
while i>0:
    print(i)
    i = i - 1

#!pip install sympy

#skipinkg loop iterations
from sympy import *
for n in range(10):
  if isprime(n):
    continue
  print(n)

n = 100
while n < 1000:
  if isprime(n):
    break
  n += 1
  print(n)

"""### Iterators"""

#iterate over a list,
#apply some operation
#store the result in a new list

nums = [1, 2, 3, 4, 5]
cubes = []
for num in nums:
    cubes.append(num ** 3)

#and this?
#Dictionary comprehension
fruit_lengths = {fruit: len(fruit) for fruit in fruits}
print(fruit_lengths)

#Set comprehension
fruits = ['apple', 'banana', 'cherry']
unique_lengths = {len(fruit) for fruit in fruits}
print(unique_lengths)

#What this code does?
quote = """Tick-tow
our incomes are like our shoes; if too small they gall and pinch us
but if too large they cause us to stumble and to trip
"""

words = quote.split()
len(words)

count = {word: 0 for word in set(words)}

for word in words:
    count[word] += 1
    # count[word] = count[word] + 1

print(count)

import numpy as np
freq_veq = np.array(list(count.values())) / len(words)

"""## Exceptions handling"""

#Try to understand the code execution
dct = dict(a=[1, 2], b=[4, 5])

key = 'c'
try:
    dct[key]
except:
    print("Key %s is missing. Add it with empty value" % key)
    dct['c'] = []

print(dct)

#in functions
def fac(n):
    assert type(n) == int, 'argument must be integer'
    assert n >= 0, 'argument must be positive'
    if n < 2:
         return 1
    else:
        return n*fac(n - 1)

a = fac(3)
a

"""## References

*   Free Python Courses by Cisco -
https://www.netacad.com/learning-collections/python

End!
"""